using System.Text;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using IdeaPulse.Models.DTOs;

namespace IdeaPulse.Services;

public class PDFService
{
    public byte[] GenerateReport(AnalysisResult analysis)
    {
        QuestPDF.Settings.License = LicenseType.Community;
        
        return Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(30);

                page.Header()
                    .Text("IdeaPulse Market Validation Report")
                    .FontSize(24)
                    .FontColor(Colors.Teal.Darken3)
                    .Bold();

                page.Content()
                    .Padding(10)
                    .Column(col =>
                    {
                        col.Item().Text($"Startup Name: {analysis.StartupName}").FontSize(14).Bold();
                        col.Item().PaddingTop(5);
                        col.Item().Text($"Description: {analysis.Description}").FontSize(12);
                        col.Item().PaddingTop(10);
                        col.Item().Text("Summary:").FontSize(14).Bold();
                        col.Item().Text(analysis.Summary).FontSize(12);

                        if (analysis.IndustryInsights != null)
                        {
                            col.Item().PaddingTop(10);
                            col.Item().Text("Industry Insights:").FontSize(14).Bold().FontColor(Colors.Teal.Darken2);
                            col.Item().Text($"Sector: {analysis.IndustryInsights.Sector}").FontSize(12);
                            col.Item().Text(analysis.IndustryInsights.Overview).FontSize(12);
                        }

                        if (analysis.MarketDemand != null)
                        {
                            col.Item().PaddingTop(10);
                            col.Item().Text("Market Demand:").FontSize(14).Bold().FontColor(Colors.Teal.Darken2);
                            col.Item().Text($"Demand Level: {analysis.MarketDemand.DemandLevel}").FontSize(12);
                            col.Item().Text(analysis.MarketDemand.Analysis).FontSize(12);
                            col.Item().Text($"Growth Potential: {analysis.MarketDemand.GrowthPotential}%").FontSize(12);
                        }

                        if (analysis.Challenges != null && analysis.Challenges.Any())
                        {
                            col.Item().PaddingTop(10);
                            col.Item().Text("Challenges:").FontSize(14).Bold().FontColor(Colors.Red.Darken2);
                            foreach (var challenge in analysis.Challenges)
                            {
                                col.Item().Text($"• {challenge}").FontSize(12);
                            }
                        }

                        if (analysis.Recommendations != null && analysis.Recommendations.Any())
                        {
                            col.Item().PaddingTop(10);
                            col.Item().Text("Recommendations:").FontSize(14).Bold().FontColor(Colors.Green.Darken2);
                            foreach (var rec in analysis.Recommendations)
                            {
                                col.Item().Text($"• {rec}").FontSize(12);
                            }
                        }

                        col.Item().PaddingTop(20);
                        col.Item()
                            .Background(Colors.Teal.Lighten5)
                            .Padding(15)
                            .Column(scoreCol =>
                            {
                                scoreCol.Item().AlignCenter().Text($"Validation Score: {analysis.ValidationScore}/100").FontSize(24).Bold().FontColor(Colors.Teal.Darken3);
                                scoreCol.Item().AlignCenter().Text(GetScoreLabel(analysis.ValidationScore)).FontSize(14).FontColor(Colors.Grey.Darken1);
                            });
                    });

                page.Footer()
                    .AlignCenter()
                    .Text("Generated by IdeaPulse AI " + DateTime.Now.ToString("MMM dd, yyyy"))
                    .FontSize(9)
                    .FontColor(Colors.Grey.Medium);
            });
        }).GeneratePdf();
    }

    private string GetScoreLabel(int score)
    {
        return score switch
        {
            >= 80 => "🎯 Promising - Strong potential!",
            >= 60 => "🔵 Moderate - Good foundation",
            >= 40 => "⚠️ Needs Work - Significant challenges",
            _ => "🚫 High Risk - Major concerns"
        };
    }
}
